import React, { useState, useEffect, forwardRef, useImperativeHandle } from 'react';
import {
  RotateCcw,
  FileText,
  MessageSquare,
  BarChart3,
  Settings,
  CheckCircle,
  Clock,
  AlertCircle,
  FolderOpen,
  RefreshCw
} from 'lucide-react';
import { PreAnalysisSession, AnalysisSettings } from '../../types/preAnalysis';
import { preAnalysisService } from '../../services/preAnalysis/PreAnalysisService';
import { useAuth } from '../../contexts/AuthContext';
import { useAIModel } from '../../contexts/AIModelContext';
import { MCPConfiguration } from './MCPConfiguration';
import { AnalysisProgress } from './AnalysisProgress';
import { QuestionAnswer } from './QuestionAnswer';
import { AnalysisReport } from './AnalysisReport';
import { Card } from '../../components/LinearComponents';
import { DocumentManager } from '../../components/documents/DocumentManager';
import { supabase } from '../../lib/supabase';

interface PreAnalysisPanelProps {
  projectId: string;
  onSessionComplete?: (sessionId: string) => void;
  onDocumentCountChange?: (count: number) => void;
}

export interface PreAnalysisPanelRef {
  startAnalysis: () => Promise<void>;
}

export const PreAnalysisPanel = forwardRef<PreAnalysisPanelRef, PreAnalysisPanelProps>(({
  projectId,
  onSessionComplete,
  onDocumentCountChange,
}, ref) => {
  const { user } = useAuth();
  const { state: aiModelState, getSelectedModel } = useAIModel();

  const [currentSession, setCurrentSession] = useState<PreAnalysisSession | null>(null);
  const [currentStep, setCurrentStep] = useState<'setup' | 'analysis' | 'questions' | 'report'>('setup');

  // ÏÑ†ÌÉùÎêú Î™®Îç∏ Ï†ïÎ≥¥ Í∞ÄÏ†∏Ïò§Í∏∞
  const selectedModel = getSelectedModel();

  const [settings, setSettings] = useState<AnalysisSettings>({
    aiModel: selectedModel?.model_id || 'gpt-4o',
    aiProvider: selectedModel?.provider || 'openai',
    mcpServers: {
      filesystem: true,
      database: true,
      websearch: false,
      github: false,
    },
    analysisDepth: 'standard',
  });
  const [error, setError] = useState<string | null>(null);
  const [documentCount, setDocumentCount] = useState(0);
  const [documentsLoading, setDocumentsLoading] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const analysisProgressRef = useRef<{ startAnalysis: () => void }>(null);

  // refÎ•º ÌÜµÌïú Ïô∏Î∂Ä Ìï®Ïàò ÎÖ∏Ï∂ú
  useImperativeHandle(ref, () => ({
    startAnalysis: async () => {
      await handleStartAnalysis();
    }
  }));

  // Î°úÎî© ÏÉÅÌÉúÎ•º ÏÉÅÏúÑ Ïª¥Ìè¨ÎÑåÌä∏Ïóê ÏïåÎ¶º
  useEffect(() => {
    if (onDocumentCountChange) {
      // Ïó¨Í∏∞ÏÑú Î°úÎî© ÏÉÅÌÉúÎèÑ Ìï®Íªò Ï†ÑÎã¨Ìï† Ïàò ÏûàÏùå
    }
  }, [isLoading, onDocumentCountChange]);

  // Í∏∞Ï°¥ ÏÑ∏ÏÖò ÌôïÏù∏ Î∞è Î¨∏ÏÑú Ïàò Î°úÎìú
  useEffect(() => {
    loadExistingSessions();
    loadDocumentCount();
  }, [projectId]);

  // AI Î™®Îç∏ ÏÉÅÌÉú Î≥ÄÍ≤Ω Ïãú ÏÑ§Ï†ï ÏóÖÎç∞Ïù¥Ìä∏
  useEffect(() => {
    const currentSelectedModel = getSelectedModel();
    console.log('üîÑ AI Model State Changed:', {
      selectedModelId: aiModelState.selectedModelId,
      selectedProviderId: aiModelState.selectedProviderId,
      currentSelectedModel,
      availableModels: aiModelState.availableModels.length
    });

    if (currentSelectedModel) {
      setSettings(prev => ({
        ...prev,
        aiModel: currentSelectedModel.model_id,
        aiProvider: currentSelectedModel.provider,
      }));
      console.log('‚úÖ Settings Updated:', {
        aiModel: currentSelectedModel.model_id,
        aiProvider: currentSelectedModel.provider
      });
    }
  }, [aiModelState.selectedModelId, aiModelState.selectedProviderId, getSelectedModel]);

  const loadDocumentCount = async () => {
    try {
      setDocumentsLoading(true);

      if (!supabase) {
        console.error('Supabase ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏Í∞Ä Ï¥àÍ∏∞ÌôîÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§.');
        return;
      }

      const { count, error } = await supabase
        .from('documents')
        .select('*', { count: 'exact', head: true })
        .eq('project_id', projectId);

      if (error) {
        console.error('Î¨∏ÏÑú Ïàò Ï°∞Ìöå Ïã§Ìå®:', error);
        return;
      }

      const newCount = count || 0;
      setDocumentCount(newCount);
      onDocumentCountChange?.(newCount);
    } catch (error) {
      console.error('Î¨∏ÏÑú Ïàò Ï°∞Ìöå Ï§ë Ïò§Î•ò:', error);
    } finally {
      setDocumentsLoading(false);
    }
  };

  const loadExistingSessions = async () => {
    try {
      const response = await preAnalysisService.getProjectSessions(projectId);
      if (response.success && response.data && response.data.length > 0) {
        const latestSession = response.data[0];
        if (latestSession.status === 'in_progress') {
          setCurrentSession(latestSession);
          determineCurrentStep(latestSession);
        }
      }
    } catch (error) {
      console.error('Í∏∞Ï°¥ ÏÑ∏ÏÖò Î°úÎìú Ïò§Î•ò:', error);
    }
  };

  const determineCurrentStep = (session: PreAnalysisSession) => {
    // ÏÑ∏ÏÖò ÏÉÅÌÉúÏóê Îî∞Îùº ÌòÑÏû¨ Îã®Í≥Ñ Í≤∞Ï†ï
    if (session.status === 'completed') {
      setCurrentStep('report');
    } else {
      // Ïã§Ï†úÎ°úÎäî ÏÑ∏ÏÖòÏùò ÏßÑÌñâ ÏÉÅÌô©ÏùÑ Ï≤¥ÌÅ¨Ìï¥ÏÑú Í≤∞Ï†ï
      setCurrentStep('analysis');
    }
  };

  const handleStartAnalysis = async () => {
    try {
      setIsLoading(true);
      setError(null);

      // ÏÑ∏ÏÖòÏù¥ ÏóÜÏúºÎ©¥ ÏÉàÎ°ú ÏÉùÏÑ±
      let sessionToUse = currentSession;
      if (!sessionToUse) {
        await createNewSession();
        sessionToUse = currentSession;
      }

      if (!sessionToUse) {
        setError('ÏÑ∏ÏÖò ÏÉùÏÑ±Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.');
        return;
      }

      // Î¨∏ÏÑú Ïàò ÌôïÏù∏
      if (documentCount === 0) {
        setError('Î∂ÑÏÑùÌï† Î¨∏ÏÑúÍ∞Ä ÏóÜÏäµÎãàÎã§. Î®ºÏ†Ä Î¨∏ÏÑúÎ•º ÏóÖÎ°úÎìúÌï¥Ï£ºÏÑ∏Ïöî.');
        return;
      }

      // Î∂ÑÏÑù Îã®Í≥ÑÎ°ú Ïù¥Îèô
      setCurrentStep('analysis');

      // AnalysisProgress Ïª¥Ìè¨ÎÑåÌä∏ÏóêÏÑú Î∂ÑÏÑù ÏãúÏûë
      setTimeout(() => {
        if (analysisProgressRef.current) {
          analysisProgressRef.current.startAnalysis();
        }

        // ÎèôÏãúÏóê ÏÑúÎπÑÏä§ÏóêÏÑúÎèÑ Î∂ÑÏÑù ÏãúÏûë
        preAnalysisService.analyzeAllProjectDocuments(
          sessionToUse.id,
          projectId
        ).then(analysisResponse => {
          if (!analysisResponse.success) {
            console.error('Î¨∏ÏÑú Î∂ÑÏÑù Ïò§Î•ò:', analysisResponse.error);
          } else {
            console.log('Î¨∏ÏÑú Î∂ÑÏÑù ÏãúÏûë ÏÑ±Í≥µ:', analysisResponse.data);
          }
        }).catch(error => {
          console.error('Î¨∏ÏÑú Î∂ÑÏÑù ÏòàÏô∏:', error);
        });
      }, 500);

    } catch (error) {
      console.error('Î∂ÑÏÑù ÏãúÏûë Ïò§Î•ò:', error);
      setError('Î∂ÑÏÑù ÏãúÏûë Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.');
    } finally {
      setIsLoading(false);
    }
  };

  const createNewSession = async () => {
    try {
      if (!user?.id) {
        setError('ÏÇ¨Ïö©Ïûê Ïù∏Ï¶ùÏù¥ ÌïÑÏöîÌï©ÎãàÎã§.');
        return;
      }

      console.log('ÏÉà ÏÑ∏ÏÖò ÏÉùÏÑ± ÏãúÎèÑ:', {
        projectId,
        settings,
        userId: user.id
      });

      const response = await preAnalysisService.startSession(
        projectId,
        settings,
        user.id
      );

      if (response.success && response.data) {
        setCurrentSession(response.data);
        console.log('ÏÑ∏ÏÖò ÏÉùÏÑ± ÏÑ±Í≥µ:', response.data);
      } else {
        setError(response.error || 'ÏÑ∏ÏÖò ÏÉùÏÑ±Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.');
        console.error('ÏÑ∏ÏÖò ÏÉùÏÑ± Ïò§Î•ò:', response.error);
      }
    } catch (error) {
      setError('ÏÑ∏ÏÖò ÏÉùÏÑ± Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.');
      console.error('ÏÑ∏ÏÖò ÏÉùÏÑ± ÏòàÏô∏:', error);
    }
  };

  const handleStepComplete = (step: string) => {
    switch (step) {
      case 'analysis':
        setCurrentStep('questions');
        break;
      case 'questions':
        setCurrentStep('report');
        break;
      case 'report':
        if (onSessionComplete && currentSession) {
          onSessionComplete(currentSession.id);
        }
        break;
    }
  };

  const handleReset = async () => {
    if (isLoading) {
      alert('Î∂ÑÏÑùÏù¥ ÏßÑÌñâ Ï§ëÏûÖÎãàÎã§. Ïû†Ïãú ÌõÑ Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî.');
      return;
    }

    if (window.confirm('ÌòÑÏû¨ ÏßÑÌñâ Ï§ëÏù∏ Î∂ÑÏÑùÏùÑ Ï¥àÍ∏∞ÌôîÌïòÏãúÍ≤†ÏäµÎãàÍπå?')) {
      setCurrentSession(null);
      setCurrentStep('setup');
      setError(null);
    }
  };

  const getStepStatus = (step: string) => {
    if (!currentSession) return 'pending';

    const stepOrder = ['setup', 'analysis', 'questions', 'report'];
    const currentIndex = stepOrder.indexOf(currentStep);
    const stepIndex = stepOrder.indexOf(step);

    if (stepIndex < currentIndex) return 'completed';
    if (stepIndex === currentIndex) return 'in_progress';
    return 'pending';
  };

  const renderStepIndicator = () => {
    const steps = [
      { id: 'setup', label: 'ÏÑ§Ï†ï', icon: Settings },
      { id: 'analysis', label: 'Î¨∏ÏÑú Î∂ÑÏÑù', icon: FileText },
      { id: 'questions', label: 'ÏßàÎ¨∏ ÎãµÎ≥Ä', icon: MessageSquare },
      { id: 'report', label: 'Î≥¥Í≥†ÏÑú', icon: BarChart3 },
    ];

    return (
      <div className="flex items-center justify-between mb-8">
        {steps.map((step, index) => {
          const status = getStepStatus(step.id);
          const Icon = step.icon;

          return (
            <React.Fragment key={step.id}>
              <div className="flex flex-col items-center">
                <div className={`
                  flex items-center justify-center w-12 h-12 rounded-full border-2 transition-colors
                  ${status === 'completed'
                    ? 'bg-success border-success text-white'
                    : status === 'in_progress'
                    ? 'bg-primary border-primary text-white'
                    : 'bg-bg-secondary border-border-primary text-text-muted'
                  }
                `}>
                  {status === 'completed' ? (
                    <CheckCircle className="w-6 h-6" />
                  ) : status === 'in_progress' ? (
                    <Clock className="w-6 h-6 animate-pulse" />
                  ) : (
                    <Icon className="w-6 h-6" />
                  )}
                </div>
                <span className={`
                  mt-2 text-sm font-medium
                  ${status === 'completed'
                    ? 'text-success'
                    : status === 'in_progress'
                    ? 'text-primary'
                    : 'text-text-muted'
                  }
                `}>
                  {step.label}
                </span>
              </div>
              {index < steps.length - 1 && (
                <div className={`
                  flex-1 h-0.5 mx-4 transition-colors
                  ${getStepStatus(steps[index + 1].id) === 'completed'
                    ? 'bg-success'
                    : 'bg-border-primary'
                  }
                `} />
              )}
            </React.Fragment>
          );
        })}
      </div>
    );
  };

  return (
    <div className="w-full max-w-none">
      {/* ÏÑ∏ÏÖò Ïª®Ìä∏Î°§ */}
      {currentSession && (
        <div className="flex justify-end mb-6">
          <button
            onClick={handleReset}
            className="flex items-center gap-2 px-4 py-2 text-text-muted hover:text-text-primary hover:bg-bg-tertiary rounded-lg transition-colors"
          >
            <RotateCcw className="w-4 h-4" />
            Ï¥àÍ∏∞Ìôî
          </button>
        </div>
      )}

      {/* ÏóêÎü¨ Î©îÏãúÏßÄ */}
      {error && (
        <div className="mb-6 p-4 bg-error/10 border border-error rounded-lg flex items-center gap-3">
          <AlertCircle className="w-5 h-5 text-error" />
          <span className="text-error">{error}</span>
        </div>
      )}

      {/* Îã®Í≥Ñ ÌëúÏãúÍ∏∞ */}
      {renderStepIndicator()}

      {/* Î©îÏù∏ ÏΩòÌÖêÏ∏† */}
      <div className="min-h-[500px]">
        {currentStep === 'setup' && (
          <div className="space-y-6">
            <div className="grid grid-cols-1 xl:grid-cols-3 gap-6 xl:h-[400px]">
              {/* AI Î™®Îç∏ Ï†ïÎ≥¥ */}
              <Card className="xl:col-span-1 h-full">
                <h3 className="text-lg font-semibold text-text-primary mb-4">AI Î™®Îç∏ ÏÑ§Ï†ï</h3>
                <div className="space-y-4 h-full flex flex-col">
                  <div className="p-4 bg-bg-secondary rounded-lg border border-border-primary flex-1">
                    <div className="flex items-center justify-between mb-3">
                      <span className="text-sm font-medium text-text-primary">ÏÑ†ÌÉùÎêú Î™®Îç∏</span>
                      <span className="text-xs text-text-muted">ÏÇ¨Ïù¥ÎìúÎ∞îÏóêÏÑú Î≥ÄÍ≤Ω</span>
                    </div>
                    <div className="space-y-3">
                      <div>
                        <p className="text-text-primary font-medium mb-1">
                          {selectedModel?.name || 'Claude Opus 4'}
                        </p>
                        <p className="text-text-secondary text-sm mb-3">
                          {selectedModel?.provider || 'anthropic'} ‚Ä¢ {selectedModel?.model_id || 'claude-3-opus-20240229'}
                        </p>
                      </div>

                      {selectedModel && (
                        <div className="space-y-3 pt-2 border-t border-border-primary">
                          <div className="grid grid-cols-1 gap-2">
                            <div className="flex justify-between items-center">
                              <span className="text-xs text-text-muted">ÏµúÎåÄ ÌÜ†ÌÅ∞:</span>
                              <span className="text-xs text-text-secondary font-medium">
                                {selectedModel.max_tokens?.toLocaleString()}
                              </span>
                            </div>
                            <div className="flex justify-between items-center">
                              <span className="text-xs text-text-muted">ÏûÖÎ†• ÎπÑÏö©:</span>
                              <span className="text-xs text-text-secondary font-medium">
                                ${selectedModel.cost_per_input_token}/1K ÌÜ†ÌÅ∞
                              </span>
                            </div>
                            <div className="flex justify-between items-center">
                              <span className="text-xs text-text-muted">Ï∂úÎ†• ÎπÑÏö©:</span>
                              <span className="text-xs text-text-secondary font-medium">
                                ${selectedModel.cost_per_output_token}/1K ÌÜ†ÌÅ∞
                              </span>
                            </div>
                          </div>
                        </div>
                      )}

                      <div className="pt-3 border-t border-border-primary">
                        <div className="space-y-2">
                          <div className="flex items-center justify-between">
                            <span className="text-xs text-text-muted">Î∂ÑÏÑù Ìö®Ïú®ÏÑ±:</span>
                            <span className="text-xs text-success font-medium">ÏµúÏ†ÅÌôîÎê®</span>
                          </div>
                          <div className="flex items-center justify-between">
                            <span className="text-xs text-text-muted">ÏòàÏÉÅ Ï≤òÎ¶¨ ÏãúÍ∞Ñ:</span>
                            <span className="text-xs text-primary font-medium">2-5Î∂Ñ</span>
                          </div>
                          <div className="flex items-center justify-between">
                            <span className="text-xs text-text-muted">ÌíàÏßà Ï†êÏàò:</span>
                            <span className="text-xs text-warning font-medium">ÎÜíÏùå</span>
                          </div>
                        </div>
                      </div>

                      <div className="pt-3 border-t border-border-primary">
                        <div className="space-y-2">
                          <div className="text-xs text-text-muted mb-2">Î™®Îç∏ ÌäπÏÑ±:</div>
                          <div className="flex flex-wrap gap-1">
                            <span className="px-2 py-1 text-xs bg-primary/20 text-primary rounded">Ï∂îÎ°†</span>
                            <span className="px-2 py-1 text-xs bg-success/20 text-success rounded">Î∂ÑÏÑù</span>
                            <span className="px-2 py-1 text-xs bg-warning/20 text-warning rounded">Î¨∏ÏÑú</span>
                          </div>
                        </div>
                      </div>

                      <div className="pt-3 border-t border-border-primary">
                        <div className="space-y-2">
                          <div className="text-xs text-text-muted mb-2">Ï∂îÏ≤ú ÏÇ¨Ïö© ÏãúÎÇòÎ¶¨Ïò§:</div>
                          <div className="space-y-1">
                            <div className="text-xs text-text-secondary">‚Ä¢ Î≥µÏû°Ìïú Í∏∞Ïà† Î¨∏ÏÑú Î∂ÑÏÑù</div>
                            <div className="text-xs text-text-secondary">‚Ä¢ Îã§Íµ≠Ïñ¥ Î¨∏ÏÑú Ï≤òÎ¶¨</div>
                            <div className="text-xs text-text-secondary">‚Ä¢ ÏÉÅÏÑ∏Ìïú Ïù∏ÏÇ¨Ïù¥Ìä∏ ÏÉùÏÑ±</div>
                          </div>
                        </div>
                      </div>

                      <div className="pt-3 border-t border-border-primary">
                        <div className="flex items-center justify-between">
                          <span className="text-xs text-text-muted">Î™®Îç∏ ÏÉÅÌÉú:</span>
                          <span className="flex items-center gap-1">
                            <div className="w-2 h-2 bg-success rounded-full"></div>
                            <span className="text-xs text-success font-medium">ÏÇ¨Ïö© Í∞ÄÎä•</span>
                          </span>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </Card>

              {/* MCP ÏÑúÎ≤Ñ ÏÑ§Ï†ï */}
              <Card className="xl:col-span-1 h-full">
                <h3 className="text-lg font-semibold text-text-primary mb-4">MCP ÏÑúÎ≤Ñ ÏÑ§Ï†ï</h3>
                <div className="h-full flex flex-col">
                  <div className="flex-1">
                    <MCPConfiguration
                      settings={settings}
                      onSettingsChange={setSettings}
                    />
                  </div>
                </div>
              </Card>

              {/* ÌîÑÎ°úÏ†ùÌä∏ Î¨∏ÏÑú Ï†ïÎ≥¥ */}
              <Card className="xl:col-span-1 h-full">
                <div className="flex items-center justify-between mb-4">
                  <h3 className="text-lg font-semibold text-text-primary">ÌîÑÎ°úÏ†ùÌä∏ Î¨∏ÏÑú</h3>
                  <div className="flex items-center gap-2">
                    <FolderOpen className="w-4 h-4 text-text-muted" />
                    <span className="text-text-secondary">
                      {documentsLoading ? (
                        <div className="flex items-center gap-2">
                          <RefreshCw className="w-4 h-4 animate-spin" />
                          Î°úÎî© Ï§ë...
                        </div>
                      ) : (
                        `${documentCount}Í∞ú Î¨∏ÏÑú`
                      )}
                    </span>
                  </div>
                </div>

                <div className="h-full flex flex-col">
                  {documentCount > 0 ? (
                    <div className="space-y-3 flex-1">
                      <p className="text-text-secondary text-sm">
                        ÏóÖÎ°úÎìúÎêú Î¨∏ÏÑúÎ•º Í∏∞Î∞òÏúºÎ°ú ÏÇ¨Ï†Ñ Î∂ÑÏÑùÏù¥ ÏßÑÌñâÎê©ÎãàÎã§.
                      </p>
                      <div className="flex-1">
                        <DocumentManager
                          projectId={projectId}
                          onDocumentChange={loadDocumentCount}
                          showUpload={false}
                          compact={true}
                        />
                      </div>
                    </div>
                  ) : (
                    <div className="text-center py-6 flex-1 flex flex-col justify-center">
                      <FolderOpen className="w-8 h-8 text-text-muted mx-auto mb-2" />
                      <p className="text-text-secondary text-sm mb-1">ÏóÖÎ°úÎìúÎêú Î¨∏ÏÑúÍ∞Ä ÏóÜÏäµÎãàÎã§</p>
                      <p className="text-text-muted text-xs">
                        ÌîÑÎ°úÏ†ùÌä∏ ÌéòÏù¥ÏßÄÏóêÏÑú Î¨∏ÏÑúÎ•º Î®ºÏ†Ä ÏóÖÎ°úÎìúÌï¥Ï£ºÏÑ∏Ïöî.
                      </p>
                    </div>
                  )}
                </div>
              </Card>
            </div>
          </div>
        )}

        {currentStep === 'analysis' && currentSession && (
          <AnalysisProgress
            ref={analysisProgressRef}
            sessionId={currentSession.id}
            onComplete={() => handleStepComplete('analysis')}
          />
        )}

        {currentStep === 'questions' && currentSession && (
          <QuestionAnswer
            sessionId={currentSession.id}
            onComplete={() => handleStepComplete('questions')}
          />
        )}

        {currentStep === 'report' && currentSession && (
          <AnalysisReport
            sessionId={currentSession.id}
            onComplete={() => handleStepComplete('report')}
          />
        )}
      </div>
    </div>
  );
});