import { useState, useCallback, useEffect } from 'react'
import { useDropzone } from 'react-dropzone'
import { Upload, File, X, AlertCircle, CheckCircle, FolderOpen } from 'lucide-react'
import { fileService } from '@/services/fileService'
import { ProjectService } from '@/services/projectService'
import { useAuthStore } from '@/stores/authStore'
import { toast } from 'sonner'

interface UploadFile {
  id: string
  file: File
  progress: number
  status: 'pending' | 'uploading' | 'success' | 'error'
  error?: string
  url?: string
  retryCount?: number
}

interface Project {
  id: string
  name: string
  description?: string | null
  status: string
  owner_id: string
  created_at: string | null
  updated_at: string | null
}

interface DocumentUploaderProps {
  projectId?: string // ÌäπÏ†ï ÌîÑÎ°úÏ†ùÌä∏Í∞Ä ÏßÄÏ†ïÎêú Í≤ΩÏö∞ (ÏÑ†ÌÉù Î∂àÍ∞Ä)
  onUploadComplete?: (files: any[]) => void
  maxFiles?: number
  maxSize?: number
  acceptedTypes?: string[]
  allowProjectSelection?: boolean // ÌîÑÎ°úÏ†ùÌä∏ ÏÑ†ÌÉù ÌóàÏö© Ïó¨Î∂Ä
}

export function DocumentUploader({
  projectId: fixedProjectId,
  onUploadComplete,
  maxFiles = 10,
  maxSize = 100 * 1024 * 1024, // 100MB
  acceptedTypes = [
    'application/pdf',
    'application/msword',
    'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
    'text/plain',
    'text/markdown',
    'image/png',
    'image/jpeg',
    'image/gif'
  ],
  allowProjectSelection = true
}: DocumentUploaderProps) {
  const { user } = useAuthStore()
  const [uploadFilesList, setUploadFilesList] = useState<UploadFile[]>([])
  const [isUploading, setIsUploading] = useState(false)

  // ÌîÑÎ°úÏ†ùÌä∏ Í¥ÄÎ†® state
  const [projects, setProjects] = useState<Project[]>([])
  const [selectedProjectId, setSelectedProjectId] = useState<string>(fixedProjectId || '')
  const [loadingProjects, setLoadingProjects] = useState(false)
  const [projectsLoaded, setProjectsLoaded] = useState(false)

  // ÌîÑÎ°úÏ†ùÌä∏ Î™©Î°ù Î°úÎìú
  const loadProjects = useCallback(async () => {
    if (!user || !allowProjectSelection || fixedProjectId) {
      setProjectsLoaded(true)
      return
    }

    try {
      setLoadingProjects(true)
      console.log('üîç ÏóÖÎ°úÎìú Í∞ÄÎä•Ìïú ÌîÑÎ°úÏ†ùÌä∏ Î™©Î°ù Î°úÎìú Ï§ë...')

      const uploadableProjects = await ProjectService.getUploadableProjects(user.id, user.role || 'user')

      console.log(`‚úÖ ÌîÑÎ°úÏ†ùÌä∏ ${uploadableProjects.length}Í∞ú Î°úÎìú ÏôÑÎ£å`)
      setProjects(uploadableProjects)

      // ÌîÑÎ°úÏ†ùÌä∏Í∞Ä ÌïòÎÇòÎèÑ ÏóÜÏúºÎ©¥ Í≤ΩÍ≥† ÌëúÏãú
      if (uploadableProjects.length === 0) {
        toast.warning('ÏóÖÎ°úÎìú Í∞ÄÎä•Ìïú ÌîÑÎ°úÏ†ùÌä∏Í∞Ä ÏóÜÏäµÎãàÎã§. Î®ºÏ†Ä ÌîÑÎ°úÏ†ùÌä∏Î•º ÏÉùÏÑ±Ìï¥Ï£ºÏÑ∏Ïöî.')
      }

    } catch (error) {
      console.error('ÌîÑÎ°úÏ†ùÌä∏ Î™©Î°ù Î°úÎìú Ïã§Ìå®:', error)
      toast.error('ÌîÑÎ°úÏ†ùÌä∏ Î™©Î°ùÏùÑ Î∂àÎü¨Ïò¨ Ïàò ÏóÜÏäµÎãàÎã§.')
    } finally {
      setLoadingProjects(false)
      setProjectsLoaded(true)
    }
  }, [user, allowProjectSelection, fixedProjectId])

  // Ïª¥Ìè¨ÎÑåÌä∏ ÎßàÏö¥Ìä∏ Ïãú ÌîÑÎ°úÏ†ùÌä∏ Î™©Î°ù Î°úÎìú
  useEffect(() => {
    loadProjects()
  }, [loadProjects])

  const onDrop = useCallback(
    (acceptedFiles: File[], rejectedFiles: any[]) => {
      // Í±∞Î∂ÄÎêú ÌååÏùºÎì§Ïóê ÎåÄÌïú ÏóêÎü¨ ÌëúÏãú
      rejectedFiles.forEach((rejection) => {
        const { file, errors } = rejection
        toast.error(`ÌååÏùº "${file.name}" ÏóÖÎ°úÎìú Ïã§Ìå®: ${errors.map((e: any) => e.message).join(', ')}`)
      })

      // ÏàòÎùΩÎêú ÌååÏùºÎì§ÏùÑ ÏóÖÎ°úÎìú Î™©Î°ùÏóê Ï∂îÍ∞Ä
      const newFiles: UploadFile[] = acceptedFiles.map((file) => ({
        id: `${Date.now()}-${Math.random()}`,
        file,
        progress: 0,
        status: 'pending',
        retryCount: 0
      }))

      setUploadFilesList((prev) => [...prev, ...newFiles])

      // ÌååÏùº Ï∂îÍ∞Ä Î°úÍ∑∏
      console.log('ÌååÏùº Ï∂îÍ∞ÄÎê®:', newFiles.length, 'Í∞ú')
    },
    []
  )

  const { getRootProps, getInputProps, isDragActive } = useDropzone({
    onDrop,
    maxFiles: maxFiles - uploadFilesList.length,
    maxSize,
    accept: acceptedTypes.reduce((acc, type) => {
      acc[type] = []
      return acc
    }, {} as Record<string, string[]>),
    disabled: isUploading || uploadFilesList.length >= maxFiles || (allowProjectSelection && !fixedProjectId && !selectedProjectId)
  })

  const removeFile = (id: string) => {
    setUploadFilesList((prev) => prev.filter((f) => f.id !== id))
  }

  const retryUpload = useCallback(async (uploadFile: UploadFile) => {
    if (!user) {
      toast.error('Î°úÍ∑∏Ïù∏Ïù¥ ÌïÑÏöîÌï©ÎãàÎã§.')
      return
    }

    const maxRetries = 3
    if ((uploadFile.retryCount || 0) >= maxRetries) {
      toast.error(`"${uploadFile.file.name}" ÏµúÎåÄ Ïû¨ÏãúÎèÑ ÌöüÏàòÎ•º Ï¥àÍ≥ºÌñàÏäµÎãàÎã§.`)
      return
    }

    console.log(`üîÑ ÌååÏùº Ïû¨ÏãúÎèÑ ÏóÖÎ°úÎìú: ${uploadFile.file.name} (${(uploadFile.retryCount || 0) + 1}/${maxRetries})`)

    // ÏÉÅÌÉúÎ•º Îã§Ïãú ÏóÖÎ°úÎî©ÏúºÎ°ú Î≥ÄÍ≤Ω
    setUploadFilesList((prev) =>
      prev.map((f) =>
        f.id === uploadFile.id
          ? { ...f, status: 'uploading', progress: 0, error: undefined, retryCount: (f.retryCount || 0) + 1 }
          : f
      )
    )

    try {
      // ÌååÏùº Î©îÌÉÄÎç∞Ïù¥ÌÑ∞ Ï∂îÏ∂ú
      const metadata = await fileService.extractMetadata(uploadFile.file)

      // ÏßÑÌñâÎ•† ÏΩúÎ∞±
      const onProgress = (progress: number) => {
        setUploadFilesList((prev) =>
          prev.map((f) =>
            f.id === uploadFile.id ? { ...f, progress } : f
          )
        )
      }

      // ÌååÏùº ÏóÖÎ°úÎìú (ÌòÑÏû¨ ÏÑ†ÌÉùÎêú ÌîÑÎ°úÏ†ùÌä∏ ÏÇ¨Ïö©)
      const targetProjectId = fixedProjectId || selectedProjectId
      const result = await fileService.uploadFile(
        uploadFile.file,
        {
          projectId: targetProjectId,
          userId: user.id,
          metadata
        },
        onProgress
      )

      // ÏÑ±Í≥µ ÏÉÅÌÉúÎ°ú ÏóÖÎç∞Ïù¥Ìä∏
      setUploadFilesList((prev) =>
        prev.map((f) =>
          f.id === uploadFile.id
            ? { ...f, status: 'success', progress: 100, url: result.url }
            : f
        )
      )

      toast.success(`"${uploadFile.file.name}" Ïû¨ÏãúÎèÑ ÏóÖÎ°úÎìú ÏÑ±Í≥µ`)
      onUploadComplete?.([result])

    } catch (error) {
      console.error('üí• Ïû¨ÏãúÎèÑ ÏóÖÎ°úÎìú Ïò§Î•ò:', error)

      // ÏóêÎü¨ ÏÉÅÌÉúÎ°ú ÏóÖÎç∞Ïù¥Ìä∏
      setUploadFilesList((prev) =>
        prev.map((f) =>
          f.id === uploadFile.id
            ? {
                ...f,
                status: 'error',
                error: error instanceof Error ? error.message : 'ÏóÖÎ°úÎìú Ïã§Ìå®'
              }
            : f
        )
      )

      toast.error(`"${uploadFile.file.name}" Ïû¨ÏãúÎèÑ Ïã§Ìå®: ${error instanceof Error ? error.message : 'Ïïå Ïàò ÏóÜÎäî Ïò§Î•ò'}`)
    }
  }, [user, fixedProjectId, selectedProjectId, onUploadComplete])

  const startUpload = useCallback(async () => {
    if (!user) {
      console.log('‚ùå ÏóÖÎ°úÎìú ÏãúÏûë Ïã§Ìå®: ÏÇ¨Ïö©Ïûê Ïù∏Ï¶ù ÏóÜÏùå')
      toast.error('Î°úÍ∑∏Ïù∏Ïù¥ ÌïÑÏöîÌï©ÎãàÎã§.')
      return
    }

    // ÌîÑÎ°úÏ†ùÌä∏ ÏÑ†ÌÉù ÌôïÏù∏ (Í≥†Ï†ï ÌîÑÎ°úÏ†ùÌä∏Í∞Ä ÏóÜÍ≥† ÌîÑÎ°úÏ†ùÌä∏ ÏÑ†ÌÉùÏù¥ ÌóàÏö©Îêú Í≤ΩÏö∞)
    if (allowProjectSelection && !fixedProjectId && !selectedProjectId) {
      console.log('‚ùå ÏóÖÎ°úÎìú ÏãúÏûë Ïã§Ìå®: ÌîÑÎ°úÏ†ùÌä∏ ÎØ∏ÏÑ†ÌÉù')
      toast.error('ÏóÖÎ°úÎìúÌï† ÌîÑÎ°úÏ†ùÌä∏Î•º ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî.')
      return
    }

    // ÌòÑÏû¨ pending ÏÉÅÌÉúÏù∏ ÌååÏùºÎì§Îßå Ï≤òÎ¶¨
    const currentPendingFiles = uploadFilesList.filter(f => f.status === 'pending')
    if (currentPendingFiles.length === 0) {
      console.log('‚ùå ÏóÖÎ°úÎìúÌï† ÌååÏùºÏù¥ ÏóÜÏùå')
      toast.warning('ÏóÖÎ°úÎìúÌï† ÌååÏùºÏù¥ ÏóÜÏäµÎãàÎã§.')
      return
    }

    // ÏÇ¨Ïö©Ìï† ÌîÑÎ°úÏ†ùÌä∏ ID Í≤∞Ï†ï
    const targetProjectId = fixedProjectId || selectedProjectId
    console.log('üìÅ ÌÉÄÍ≤ü ÌîÑÎ°úÏ†ùÌä∏ ID:', targetProjectId)

    console.log('üöÄ ÏóÖÎ°úÎìú ÏãúÏûë:', currentPendingFiles.length, 'Í∞ú ÌååÏùº')
    setIsUploading(true)
    const completedFiles: any[] = []
    let errorCount = 0

    try {
      // Î™®Îì† ÌååÏùºÏùÑ ÏàúÏ∞®Ï†ÅÏúºÎ°ú ÏóÖÎ°úÎìú (ÎîîÎ≤ÑÍπÖÏùÑ ÏúÑÌï¥)
      for (const uploadFile of currentPendingFiles) {
        try {
          console.log(`üì§ ÌååÏùº ÏóÖÎ°úÎìú ÏãúÏûë: ${uploadFile.file.name}`, {
            fileSize: uploadFile.file.size,
            fileType: uploadFile.file.type,
            projectId: fixedProjectId,
            userId: user.id
          })

          // ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏: ÏóÖÎ°úÎî© ÏãúÏûë
          setUploadFilesList((prev) =>
            prev.map((f) =>
              f.id === uploadFile.id ? { ...f, status: 'uploading', progress: 0 } : f
            )
          )

          // ÌååÏùº Î©îÌÉÄÎç∞Ïù¥ÌÑ∞ Ï∂îÏ∂ú
          console.log('üìã Î©îÌÉÄÎç∞Ïù¥ÌÑ∞ Ï∂îÏ∂ú Ï§ë...')
          const metadata = await fileService.extractMetadata(uploadFile.file)
          console.log('‚úÖ Î©îÌÉÄÎç∞Ïù¥ÌÑ∞ Ï∂îÏ∂ú ÏôÑÎ£å:', metadata)

          // ÏßÑÌñâÎ•† ÏΩúÎ∞±
          const onProgress = (progress: number) => {
            console.log(`üìä ÏóÖÎ°úÎìú ÏßÑÌñâÎ•†: ${progress}%`)
            setUploadFilesList((prev) =>
              prev.map((f) =>
                f.id === uploadFile.id ? { ...f, progress } : f
              )
            )
          }

          // ÌååÏùº ÏóÖÎ°úÎìú
          console.log('‚òÅÔ∏è ÌååÏùº ÏóÖÎ°úÎìú Ïã§Ìñâ...')
          const result = await fileService.uploadFile(
            uploadFile.file,
            {
              projectId: targetProjectId,
              userId: user.id,
              metadata
            },
            onProgress
          )

          console.log('‚úÖ ÌååÏùº ÏóÖÎ°úÎìú ÏÑ±Í≥µ:', result)

          // ÏÑ±Í≥µ ÏÉÅÌÉúÎ°ú ÏóÖÎç∞Ïù¥Ìä∏
          setUploadFilesList((prev) =>
            prev.map((f) =>
              f.id === uploadFile.id
                ? { ...f, status: 'success', progress: 100, url: result.url }
                : f
            )
          )

          completedFiles.push(result)
          toast.success(`"${uploadFile.file.name}" ÏóÖÎ°úÎìú ÏôÑÎ£å`)

        } catch (error) {
          console.error('üí• ÌååÏùº ÏóÖÎ°úÎìú Ïò§Î•ò:', error)
          errorCount++

          // ÏóêÎü¨ ÏÉÅÌÉúÎ°ú ÏóÖÎç∞Ïù¥Ìä∏
          setUploadFilesList((prev) =>
            prev.map((f) =>
              f.id === uploadFile.id
                ? {
                    ...f,
                    status: 'error',
                    error: error instanceof Error ? error.message : 'ÏóÖÎ°úÎìú Ïã§Ìå®'
                  }
                : f
            )
          )

          toast.error(`"${uploadFile.file.name}" ÏóÖÎ°úÎìú Ïã§Ìå®: ${error instanceof Error ? error.message : 'Ïïå Ïàò ÏóÜÎäî Ïò§Î•ò'}`)
        }
      }

      // Í≤∞Í≥º ÏöîÏïΩ
      if (completedFiles.length > 0) {
        toast.success(`Ï¥ù ${completedFiles.length}Í∞ú ÌååÏùºÏù¥ ÏÑ±Í≥µÏ†ÅÏúºÎ°ú ÏóÖÎ°úÎìúÎêòÏóàÏäµÎãàÎã§.`)
        onUploadComplete?.(completedFiles)
      }

      if (errorCount > 0) {
        toast.error(`${errorCount}Í∞ú ÌååÏùº ÏóÖÎ°úÎìúÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.`)
      }

    } catch (error) {
      console.error('üí• ÏóÖÎ°úÎìú ÌîÑÎ°úÏÑ∏Ïä§ Ïò§Î•ò:', error)
      toast.error('ÏóÖÎ°úÎìú Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.')
    } finally {
      setIsUploading(false)
      console.log('üèÅ ÏóÖÎ°úÎìú ÌîÑÎ°úÏÑ∏Ïä§ ÏôÑÎ£å')
    }
  }, [uploadFilesList, user, fixedProjectId, selectedProjectId, onUploadComplete, allowProjectSelection])

  // ÏûêÎèô ÏóÖÎ°úÎìú Ï†úÍ±∞ - ÏÇ¨Ïö©ÏûêÍ∞Ä ÏßÅÏ†ë "ÏóÖÎ°úÎìú ÏãúÏûë" Î≤ÑÌäºÏùÑ ÌÅ¥Î¶≠Ìï¥Ïïº Ìï®

  const clearCompleted = () => {
    setUploadFilesList((prev) => prev.filter((f) => f.status !== 'success'))
  }

  const hasSuccessFiles = uploadFilesList.some((f) => f.status === 'success')
  const hasPendingFiles = uploadFilesList.some((f) => f.status === 'pending')

  return (
    <div className="space-y-4">
      {/* ÌîÑÎ°úÏ†ùÌä∏ ÏÑ†ÌÉù ÏòÅÏó≠ */}
      {allowProjectSelection && !fixedProjectId && (
        <div className="space-y-2">
          <label className="block text-sm font-medium text-text-primary">
            ÏóÖÎ°úÎìúÌï† ÌîÑÎ°úÏ†ùÌä∏ ÏÑ†ÌÉù <span className="text-red-500">*</span>
          </label>

          {loadingProjects ? (
            <div className="flex items-center space-x-2 p-3 bg-background-secondary border border-border rounded-lg">
              <div className="animate-spin rounded-full h-4 w-4 border-2 border-accent border-t-transparent"></div>
              <span className="text-sm text-text-tertiary">ÌîÑÎ°úÏ†ùÌä∏ Î™©Î°ù Î°úÎìú Ï§ë...</span>
            </div>
          ) : projects.length > 0 ? (
            <div className="relative z-10">
              <select
                value={selectedProjectId}
                onChange={(e) => setSelectedProjectId(e.target.value)}
                className="w-full pl-10 pr-10 py-3 bg-background-secondary border border-border rounded-lg text-text-primary focus:outline-none focus:ring-2 focus:ring-accent focus:border-transparent appearance-none cursor-pointer hover:bg-background-tertiary transition-colors relative z-20"
                style={{
                  backgroundImage: `url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 20 20'%3e%3cpath stroke='%236b7280' stroke-linecap='round' stroke-linejoin='round' stroke-width='1.5' d='m6 8 4 4 4-4'/%3e%3c/svg%3e")`,
                  backgroundPosition: 'right 12px center',
                  backgroundRepeat: 'no-repeat',
                  backgroundSize: '16px'
                }}
              >
                <option
                  value=""
                  style={{
                    backgroundColor: '#101113',
                    color: '#8a8f98',
                    padding: '8px 12px'
                  }}
                >
                  ÌîÑÎ°úÏ†ùÌä∏Î•º ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî
                </option>
                {projects.map((project) => (
                  <option
                    key={project.id}
                    value={project.id}
                    style={{
                      backgroundColor: '#101113',
                      color: '#f7f8f8',
                      padding: '8px 12px',
                      borderBottom: '1px solid #2a2d30'
                    }}
                  >
                    {project.name}
                    {project.description && ` - ${project.description.substring(0, 50)}${project.description.length > 50 ? '...' : ''}`}
                  </option>
                ))}
              </select>
              <FolderOpen className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-text-tertiary pointer-events-none" />
            </div>
          ) : projectsLoaded ? (
            <div className="p-4 bg-orange-50 border border-orange-200 rounded-lg">
              <div className="flex items-center space-x-2">
                <AlertCircle className="h-4 w-4 text-orange-500" />
                <p className="text-sm text-orange-700">
                  ÏóÖÎ°úÎìú Í∞ÄÎä•Ìïú ÌîÑÎ°úÏ†ùÌä∏Í∞Ä ÏóÜÏäµÎãàÎã§. Î®ºÏ†Ä ÌîÑÎ°úÏ†ùÌä∏Î•º ÏÉùÏÑ±ÌïòÍ±∞ÎÇò ÌîÑÎ°úÏ†ùÌä∏ Î©§Î≤ÑÎ°ú Ï¥àÎåÄÎ∞õÏïÑÏïº Ìï©ÎãàÎã§.
                </p>
              </div>
            </div>
          ) : null}

          {selectedProjectId && (
            <div className="text-xs text-text-tertiary">
              ÏÑ†ÌÉùÎêú ÌîÑÎ°úÏ†ùÌä∏: {projects.find(p => p.id === selectedProjectId)?.name}
            </div>
          )}
        </div>
      )}

      {/* Í≥†Ï†ï ÌîÑÎ°úÏ†ùÌä∏ ÌëúÏãú */}
      {fixedProjectId && (
        <div className="p-3 bg-background-secondary border border-border rounded-lg">
          <div className="flex items-center space-x-2">
            <FolderOpen className="h-4 w-4 text-accent" />
            <span className="text-sm text-text-primary">
              ÏßÄÏ†ïÎêú ÌîÑÎ°úÏ†ùÌä∏Ïóê ÏóÖÎ°úÎìúÎê©ÎãàÎã§
            </span>
          </div>
        </div>
      )}

      {/* ÎìúÎûòÍ∑∏ Ïï§ ÎìúÎ°≠ ÏòÅÏó≠ */}
      <div
        {...getRootProps()}
        className={`
          border-2 border-dashed rounded-lg p-8 text-center cursor-pointer transition-colors
          ${isDragActive
            ? 'border-accent bg-accent/5'
            : 'border-border hover:border-accent/50'
          }
          ${isUploading || uploadFilesList.length >= maxFiles || (allowProjectSelection && !fixedProjectId && !selectedProjectId)
            ? 'opacity-50 cursor-not-allowed'
            : ''
          }
        `}
      >
        <input {...getInputProps()} />
        <Upload className="mx-auto h-12 w-12 text-text-tertiary mb-4" />
        <div className="space-y-2">
          <p className="text-lg font-medium text-text-primary">
            {allowProjectSelection && !fixedProjectId && !selectedProjectId
              ? 'Î®ºÏ†Ä ÌîÑÎ°úÏ†ùÌä∏Î•º ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî'
              : isDragActive
              ? 'ÌååÏùºÏùÑ Ïó¨Í∏∞Ïóê ÎÜìÏúºÏÑ∏Ïöî'
              : 'ÌååÏùºÏùÑ ÎìúÎûòÍ∑∏ÌïòÍ±∞ÎÇò ÌÅ¥Î¶≠ÌïòÏó¨ ÏóÖÎ°úÎìú'
            }
          </p>
          <p className="text-sm text-text-tertiary">
            PDF, Word, ÌÖçÏä§Ìä∏, Ïù¥ÎØ∏ÏßÄ ÌååÏùº ÏßÄÏõê (ÏµúÎåÄ {Math.floor(maxSize / (1024 * 1024))}MB)
          </p>
          <p className="text-xs text-text-tertiary">
            ÏµúÎåÄ {maxFiles}Í∞ú ÌååÏùº ({uploadFilesList.length}/{maxFiles})
          </p>
          {allowProjectSelection && !fixedProjectId && !selectedProjectId && (
            <p className="text-xs text-orange-600 mt-2">
              ‚ö†Ô∏è ÌîÑÎ°úÏ†ùÌä∏Î•º ÏÑ†ÌÉùÌïú ÌõÑ ÌååÏùºÏùÑ ÏóÖÎ°úÎìúÌï† Ïàò ÏûàÏäµÎãàÎã§
            </p>
          )}
        </div>
      </div>

      {/* ÏóÖÎ°úÎìú ÌååÏùº Î™©Î°ù */}
      {uploadFilesList.length > 0 && (
        <div className="space-y-3">
          <div className="flex items-center justify-between">
            <h3 className="text-sm font-medium text-text-primary">
              ÏóÖÎ°úÎìú ÌååÏùº ({uploadFilesList.length})
              {hasPendingFiles && (
                <span className="ml-2 text-xs text-orange-500">
                  {uploadFilesList.filter(f => f.status === 'pending').length}Í∞ú ÎåÄÍ∏∞ Ï§ë
                </span>
              )}
            </h3>
            <div className="flex space-x-2">
              {hasSuccessFiles && (
                <button
                  onClick={clearCompleted}
                  className="text-xs text-text-tertiary hover:text-text-secondary transition-colors"
                >
                  ÏôÑÎ£åÎêú ÌååÏùº Ï†úÍ±∞
                </button>
              )}
              {hasPendingFiles && !isUploading && (
                <button
                  onClick={startUpload}
                  className={`linear-button text-sm px-4 py-2 font-medium ${
                    (allowProjectSelection && !fixedProjectId && !selectedProjectId)
                      ? 'linear-button-disabled cursor-not-allowed'
                      : 'linear-button-primary'
                  }`}
                  disabled={isUploading || (allowProjectSelection && !fixedProjectId && !selectedProjectId)}
                  title={
                    (allowProjectSelection && !fixedProjectId && !selectedProjectId)
                      ? 'ÌîÑÎ°úÏ†ùÌä∏Î•º Î®ºÏ†Ä ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî'
                      : undefined
                  }
                >
                  üì§ ÏóÖÎ°úÎìú ÏãúÏûë ({uploadFilesList.filter(f => f.status === 'pending').length}Í∞ú)
                </button>
              )}
              {isUploading && (
                <div className="flex items-center space-x-2 text-sm text-accent">
                  <div className="animate-spin rounded-full h-4 w-4 border-2 border-accent border-t-transparent"></div>
                  <span>
                    ÏóÖÎ°úÎìú Ï§ë... ({uploadFilesList.filter(f => f.status === 'uploading').length}/{uploadFilesList.filter(f => f.status === 'pending' || f.status === 'uploading').length})
                  </span>
                </div>
              )}
            </div>
          </div>

          <div className="space-y-2 max-h-60 overflow-y-auto">
            {uploadFilesList.map((uploadFile) => (
              <div
                key={uploadFile.id}
                className="flex items-center space-x-3 p-3 bg-background-secondary rounded-lg"
              >
                <File className="h-5 w-5 text-text-tertiary flex-shrink-0" />

                <div className="flex-1 min-w-0">
                  <div className="flex items-center justify-between">
                    <p className="text-sm font-medium text-text-primary truncate">
                      {uploadFile.file.name}
                    </p>
                    <div className="flex items-center space-x-2">
                      {uploadFile.status === 'pending' && (
                        <span className="text-xs text-orange-500 bg-orange-50 px-2 py-1 rounded">
                          ÎåÄÍ∏∞
                        </span>
                      )}
                      {uploadFile.status === 'uploading' && (
                        <div className="flex items-center space-x-2">
                          <div className="animate-spin rounded-full h-3 w-3 border-2 border-accent border-t-transparent"></div>
                          <span className="text-xs text-accent font-medium">
                            {uploadFile.progress}%
                          </span>
                        </div>
                      )}
                      {uploadFile.status === 'success' && (
                        <div className="flex items-center space-x-1">
                          <CheckCircle className="h-4 w-4 text-green-500" />
                          <span className="text-xs text-green-600 bg-green-50 px-2 py-1 rounded">
                            ÏôÑÎ£å
                          </span>
                        </div>
                      )}
                      {uploadFile.status === 'error' && (
                        <div className="flex items-center space-x-1">
                          <AlertCircle className="h-4 w-4 text-red-500" />
                          <span className="text-xs text-red-600 bg-red-50 px-2 py-1 rounded">
                            Ïã§Ìå® {uploadFile.retryCount ? `(${uploadFile.retryCount}/3)` : ''}
                          </span>
                          {(uploadFile.retryCount || 0) < 3 && (
                            <button
                              onClick={() => retryUpload(uploadFile)}
                              className="text-xs text-blue-600 hover:text-blue-800 bg-blue-50 hover:bg-blue-100 px-2 py-1 rounded transition-colors"
                              title="Ïû¨ÏãúÎèÑ"
                            >
                              üîÑ Ïû¨ÏãúÎèÑ
                            </button>
                          )}
                        </div>
                      )}
                      {uploadFile.status !== 'uploading' && (
                        <button
                          onClick={() => removeFile(uploadFile.id)}
                          className="text-text-tertiary hover:text-red-500 transition-colors"
                          title="ÌååÏùº Ï†úÍ±∞"
                        >
                          <X className="h-4 w-4" />
                        </button>
                      )}
                    </div>
                  </div>

                  <div className="flex items-center justify-between mt-1">
                    <span className="text-xs text-text-tertiary">
                      {(uploadFile.file.size / (1024 * 1024)).toFixed(2)} MB
                    </span>
                    {uploadFile.status === 'error' && uploadFile.error && (
                      <span className="text-xs text-red-500">{uploadFile.error}</span>
                    )}
                  </div>

                  {/* ÏßÑÌñâÎ•† Î∞î */}
                  {uploadFile.status === 'uploading' && (
                    <div className="w-full bg-background-tertiary rounded-full h-1.5 mt-2">
                      <div
                        className="bg-accent h-1.5 rounded-full transition-all duration-300"
                        style={{ width: `${uploadFile.progress}%` }}
                      />
                    </div>
                  )}
                </div>
              </div>
            ))}
          </div>
        </div>
      )}
    </div>
  )
}