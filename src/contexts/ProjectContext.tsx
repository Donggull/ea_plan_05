aW1wb3J0IHsgY3JlYXRlQ29udGV4dCwgdXNlQ29udGV4dCwgdXNlUmVkdWNlciwgdXNlRWZmZWN0LCB1c2VSZWYgfSBmcm9tICdyZWFjdCcKaW1wb3J0IHR5cGUgeyBSZWFjdE5vZGUgfSBmcm9tICdyZWFjdCcKaW1wb3J0IHsgUHJvamVjdFNlcnZpY2UgfSBmcm9tICcuLi9zZXJ2aWNlcy9wcm9qZWN0U2VydmljZScKaW1wb3J0IHsgdXNlQXV0aCB9IGZyb20gJy4vQXV0aENvbnRleHQnCgppbnRlcmZhY2UgUHJvamVjdCB7CiAgaWQ6IHN0cmluZwogIG5hbWU6IHN0cmluZwogIGRlc2NyaXB0aW9uPzogc3RyaW5nIHwgbnVsbAogIHN0YXR1czogc3RyaW5nCiAgb3duZXJfaWQ6IHN0cmluZwogIGNyZWF0ZWRfYXQ6IHN0cmluZyB8IG51bGwKICB1cGRhdGVkX2F0OiBzdHJpbmcgfCBudWxsCiAgW2tleTogc3RyaW5nXTogYW55Cn0KCmludGVyZmFjZSBQcm9qZWN0SW5zZXJ0IHsKICBuYW1lOiBzdHJpbmcKICBkZXNjcmlwdGlvbj86IHN0cmluZwogIHN0YXR1cz86IHN0cmluZwogIG93bmVyX2lkOiBzdHJpbmcKfQoKaW50ZXJmYWNlIFByb2plY3RVcGRhdGUgewogIG5hbWU/OiBzdHJpbmcKICBkZXNjcmlwdGlvbj86IHN0cmluZwogIHN0YXR1cz86IHN0cmluZwogIHVwZGF0ZWRfYXQ/OiBzdHJpbmcKfQoKaW50ZXJmYWNlIFByb2plY3RTdGF0ZSB7CiAgY3VycmVudFByb2plY3Q6IFByb2plY3QgfCBudWxsCiAgdXNlclByb2plY3RzOiBQcm9qZWN0W10KICByZWNlbnRQcm9qZWN0czogUHJvamVjdFtdCiAgbG9hZGluZzogYm9vbGVhbgogIGVycm9yOiBzdHJpbmcgfCBudWxsCn0KCnR5cGUgUHJvamVjdEFjdGlvbiA9CiAgfCB7IHR5cGU6ICdTRVRfTE9BRElORyc7IHBheWxvYWQ6IGJvb2xlYW4gfQogIHwgeyB0eXBlOiAnU0VUX0VSUk9SJzsgcGF5bG9hZDogc3RyaW5nIHwgbnVsbCB9CiAgfCB7IHR5cGU6ICdTRVRfQ1VSUkVOVF9QUk9KRUNUJzsgcGF5bG9hZDogUHJvamVjdCB8IG51bGwgfQogIHwgeyB0eXBlOiAnU0VUX1VTRVJfUFJPSkVDVFMnOyBwYXlsb2FkOiBQcm9qZWN0W10gfQogIHwgeyB0eXBlOiAnU0VUX1JFQ0VOVF9QUk9KRUNUUyc7IHBheWxvYWQ6IFByb2plY3RbXSB9CiAgfCB7IHR5cGU6ICdBRERfUFJPSkVDVCc7IHBheWxvYWQ6IFByb2plY3QgfQogIHwgeyB0eXBlOiAnVVBEQVRFX1BST0pFQ1QnOyBwYXlsb2FkOiBQcm9qZWN0IH0KICB8IHsgdHlwZTogJ1JFTU9WRV9QUk9KRUNUJzsgcGF5bG9hZDogc3RyaW5nIH0KICB8IHsgdHlwZTogJ0NMRUFSX1BST0pFQ1RTJyB9Cgpjb25zdCBpbml0aWFsU3RhdGU6IFByb2plY3RTdGF0ZSA9IHsKICBjdXJyZW50UHJvamVjdDogbnVsbCwKICB1c2VyUHJvamVjdHM6IFtdLAogIHJlY2VudFByb2plY3RzOiBbXSwKICBsb2FkaW5nOiBmYWxzZSwKICBlcnJvcjogbnVsbAp9CgpmdW5jdGlvbiBwcm9qZWN0UmVkdWNlcihzdGF0ZTogUHJvamVjdFN0YXRlLCBhY3Rpb246IFByb2plY3RBY3Rpb24pOiBQcm9qZWN0U3RhdGUgewogIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHsKICAgIGNhc2UgJ1NFVF9MT0FESU5HJzoKICAgICAgcmV0dXJuIHsgLi4uc3RhdGUsIGxvYWRpbmc6IGFjdGlvbi5wYXlsb2FkIH0KICAgIGNhc2UgJ1NFVF9FUlJPUic6CiAgICAgIHJldHVybiB7IC4uLnN0YXRlLCBlcnJvcjogYWN0aW9uLnBheWxvYWQsIGxvYWRpbmc6IGZhbHNlIH0KICAgIGNhc2UgJ1NFVF9DVVJSRU5UX1BST0pFQ1QnOgogICAgICByZXR1cm4geyAuLi5zdGF0ZSwgY3VycmVudFByb2plY3Q6IGFjdGlvbi5wYXlsb2FkIH0KICAgIGNhc2UgJ1NFVF9VU0VSX1BST0pFQ1RTJzoKICAgICAgcmV0dXJuIHsgLi4uc3RhdGUsIHVzZXJQcm9qZWN0czogYWN0aW9uLnBheWxvYWQsIGxvYWRpbmc6IGZhbHNlIH0KICAgIGNhc2UgJ1NFVF9SRUNFTlRfUFJPSkVDVFMnOgogICAgICByZXR1cm4geyAuLi5zdGF0ZSwgcmVjZW50UHJvamVjdHM6IGFjdGlvbi5wYXlsb2FkIH0KICAgIGNhc2UgJ0FERF9QUk9KRUNUJzoKICAgICAgcmV0dXJuIHsKICAgICAgICAuLi5zdGF0ZSwKICAgICAgICB1c2VyUHJvamVjdHM6IFthY3Rpb24ucGF5bG9hZCwgLi4uc3RhdGUudXNlclByb2plY3RzXSwKICAgICAgICByZWNlbnRQcm9qZWN0czogW2FjdGlvbi5wYXlsb2FkLCAuLi5zdGF0ZS5yZWNlbnRQcm9qZWN0cy5zbGljZSgwLCA0KV0KICAgICAgfQogICAgY2FzZSAnVVBEQVRFX1BST0pFQ1QnOgogICAgICByZXR1cm4gewogICAgICAgIC4uLnN0YXRlLAogICAgICAgIHVzZXJQcm9qZWN0czogc3RhdGUudXNlclByb2plY3RzLm1hcChwcm9qZWN0ID0+CiAgICAgICAgICBwcm9qZWN0LmlkID09PSBhY3Rpb24ucGF5bG9hZC5pZCA/IGFjdGlvbi5wYXlsb2FkIDogcHJvamVjdAogICAgICAgICksCiAgICAgICAgcmVjZW50UHJvamVjdHM6IHN0YXRlLnJlY2VudFByb2plY3RzLm1hcChwcm9qZWN0ID0+CiAgICAgICAgICBwcm9qZWN0LmlkID09PSBhY3Rpb24ucGF5bG9hZC5pZCA/IGFjdGlvbi5wYXlsb2FkIDogcHJvamVjdAogICAgICAgICksCiAgICAgICAgY3VycmVudFByb2plY3Q6IHN0YXRlLmN1cnJlbnRQcm9qZWN0Py5pZCA9PT0gYWN0aW9uLnBheWxvYWQuaWQgPyBhY3Rpb24ucGF5bG9hZCA6IHN0YXRlLmN1cnJlbnRQcm9qZWN0CiAgICAgIH0KICAgIGNhc2UgJ1JFTU9WRV9QUk9KRUNUJzoKICAgICAgcmV0dXJuIHsKICAgICAgICAuLi5zdGF0ZSwKICAgICAgICB1c2VyUHJvamVjdHM6IHN0YXRlLnVzZXJQcm9qZWN0cy5maWx0ZXIocHJvamVjdCA9PiBwcm9qZWN0LmlkICE9PSBhY3Rpb24ucGF5bG9hZCksCiAgICAgICAgcmVjZW50UHJvamVjdHM6IHN0YXRlLnJlY2VudFByb2plY3RzLmZpbHRlcihwcm9qZWN0ID0+IHByb2plY3QuaWQgIT09IGFjdGlvbi5wYXlsb2FkKSwKICAgICAgICBjdXJyZW50UHJvamVjdDogc3RhdGUuY3VycmVudFByb2plY3Q/LmlkID09PSBhY3Rpb24ucGF5bG9hZCA/IG51bGwgOiBzdGF0ZS5jdXJyZW50UHJvamVjdAogICAgICB9CiAgICBjYXNlICdDTEVBUl9QUk9KRUNUUyc6CiAgICAgIHJldHVybiB7CiAgICAgICAgLi4uc3RhdGUsCiAgICAgICAgY3VycmVudFByb2plY3Q6IG51bGwsCiAgICAgICAgdXNlclByb2plY3RzOiBbXSwKICAgICAgICByZWNlbnRQcm9qZWN0czogW10sCiAgICAgICAgbG9hZGluZzogZmFsc2UsCiAgICAgICAgZXJyb3I6IG51bGwKICAgICAgfQogICAgZGVmYXVsdDoKICAgICAgcmV0dXJuIHN0YXRlCiAgfQp9CgppbnRlcmZhY2UgUHJvamVjdENvbnRleHRUeXBlIHsKICBzdGF0ZTogUHJvamVjdFN0YXRlCiAgc2VsZWN0UHJvamVjdDogKHByb2plY3Q6IFByb2plY3QpID0+IHZvaWQKICBsb2FkVXNlclByb2plY3RzOiAob3B0aW9ucz86IHsgc2lsZW50PzogYm9vbGVhbiB9KSA9PiBQcm9taXNlPHZvaWQ+CiAgbG9hZFJlY2VudFByb2plY3RzOiAoKSA9PiBQcm9taXNlPHZvaWQ+CiAgY3JlYXRlUHJvamVjdDogKHByb2plY3REYXRhOiBQcm9qZWN0SW5zZXJ0KSA9PiBQcm9taXNlPFByb2plY3Q+CiAgdXBkYXRlUHJvamVjdDogKHByb2plY3RJZDogc3RyaW5nLCB1cGRhdGVzOiBQcm9qZWN0VXBkYXRlKSA9PiBQcm9taXNlPFByb2plY3Q+CiAgZGVsZXRlUHJvamVjdDogKHByb2plY3RJZDogc3RyaW5nKSA9PiBQcm9taXNlPHZvaWQ+CiAgZ2V0Q3VycmVudFByb2plY3Q6ICgpID0+IFByb2plY3QgfCBudWxsCiAgY2xlYXJQcm9qZWN0czogKCkgPT4gdm9pZAp9Cgpjb25zdCBQcm9qZWN0Q29udGV4dCA9IGNyZWF0ZUNvbnRleHQ8UHJvamVjdENvbnRleHRUeXBlIHwgdW5kZWZpbmVkPih1bmRlZmluZWQpCgpleHBvcnQgZnVuY3Rpb24gUHJvamVjdFByb3ZpZGVyKHsgY2hpbGRyZW4gfTogeyBjaGlsZHJlbiA6IFJlYWN0Tm9kZSB9KSB7CiAgY29uc3QgW3N0YXRlLCBkaXNwYXRjaF0gPSB1c2VSZWR1Y2VyKHByb2plY3RSZWR1Y2VyLCBpbml0aWFsU3RhdGUpCiAgY29uc3QgeyB1c2VyLCBpc0F1dGhlbnRpY2F0ZWQgfSA9IHVzZUF1dGgoKQogIGNvbnN0IGxhc3RMb2FkZWRVc2VySWRSZWYgPSB1c2VSZWY8c3RyaW5nIHwgbnVsbD4obnVsbCkKICBjb25zdCBoYXNMb2FkZWRQcm9qZWN0c1JlZiA9IHVzZVJlZihmYWxzZS...